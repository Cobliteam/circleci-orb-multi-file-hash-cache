---
version: 2.1

variables:
  orb_parameters: &orb_parameters
    in_files:
      description: space delimeted string with filenames to get hash from
      type: string
    out_file:
      description: the path to file to store in_files hashes
      type: string
      default: /tmp/infiles_checksums
  cache_paths:

examples:
  two_files:
    description: Use two different files to generate cache hash
    usage:
      version: 2.1
      variables:
        multi_hash_args: &multi_hash_args
          in_files: "file1.txt file2.yml"
          out_file: /tmp/infiles_checksum
          cache_prefix: dep-v1
        cache_name: &cache_name dep-v1-{{ checksum "/tmp/infiles_checksum" }}-{{ .Branch }}
      orbs:
        multi_file_hash_cache: cobli/multi-file-hash-cache@1.0.0
      workflows:
        tests:
          jobs:
            - test1
            - test2
      jobs:
        test1:
          docker:
            - image: circleci/openjdk:8u222-jdk-stretch
          steps:
            - multi_file_hash_cache/restore:
                <<: *multi_hash_args
            - run:
                name: My first test
                command: echo "Testing"
            - save_cache:
                paths:
                  - ~/.ivy2/cache
                  - ~/sbt/boot/
                  - ~/.cousier/cache
                key: *cache_name
        test2:
          docker:
            - image: circleci/openjdk:8u222-jdk-stretch
          steps:
            - multi_file_hash_cache/restore:
                <<: *multi_hash_args
            - run:
                name: My second test
                command: echo "Testing again..."

description: Handle cache based in multiple files hash
commands:
  generate_hash:
    description: Generate a file with hashes from all informed files
    parameters:
      <<: *orb_parameters
    steps:
      - run:
          name: Creates cache checksum
          command: sha256sum <<parameters.in_files>> > <<parameters.out_file>>

  restore:
    description: >
      Generate a file with hashes from all informed files and restore it.
      Note that we assume a cache name in the format
      $cache_prefix-${checksum out_file}-branch
      and we will restore it in the following sequence...
      $cache_prefix-${checksum out_file}-branch
      $cache_prefix-${checksum out_file}
      $cache_prefix
    parameters:
      <<: *orb_parameters
      cache_prefix:
        description: the cache prefix used to versionate the cache
        type: string
        default: v1-dependencies
    steps:
      - generate_hash:
          in_files: <<parameters.in_files>>
          out_file: <<parameters.out_file>>
      - restore_cache:
          keys:
            - <<parameters.cache_prefix>>-{{ checksum "<<parameters.out_file>>" }}-{{ .Branch }}
            - <<parameters.cache_prefix>>-{{ checksum "<<parameters.out_file>>" }}
            - <<parameters.cache_prefix>>
